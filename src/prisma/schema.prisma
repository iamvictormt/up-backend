generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  password     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  profileImage String?

  professionalId String?       @unique
  professional   Professional? @relation("UserProfessional", fields: [professionalId], references: [id])

  partnerSupplierId String?          @unique
  partnerSupplier   PartnerSupplier? @relation("UserPartner", fields: [partnerSupplierId], references: [id])

  loveDecorationId String?         @unique
  loveDecoration   LoveDecoration? @relation("UserLoveDecoration", fields: [loveDecorationId], references: [id])

  address   Address? @relation(fields: [addressId], references: [id])
  addressId String?

  posts             Post[]
  likes             Like[]
  comments          Comment[]
  notification      Notification[]
  report            Report[]
  passwordResetCode PasswordResetCode[]
}

model Professional {
  id                 String            @id @default(uuid())
  name               String
  document           String?
  generalRegister    String?
  registrationAgency String?
  description        String?
  experience         String?
  officeName         String?
  verified           Boolean           @default(false)
  featured           Boolean           @default(false)
  level              ProfessionalLevel @default(BRONZE)
  points             Int               @default(0)
  phone              String
  socialMediaId      String?           @unique
  social             SocialMedia?      @relation(fields: [socialMediaId], references: [id])

  user               User?               @relation("UserProfessional")
  workshops          Workshop[]
  pointHistory       PointHistory[]
  eventRegistrations EventRegistration[]

  profession   Profession? @relation(fields: [professionId], references: [id])
  professionId String?
}

model PartnerSupplier {
  id                String  @id @default(uuid())
  tradeName         String
  companyName       String
  document          String
  stateRegistration String?
  contact           String?

  accessPending Boolean @default(true)

  user         User?         @relation("UserPartner")
  store        Store?
  storeId      String?       @unique
  subscription Subscription?
}

model SocialMedia {
  id        String  @id @default(uuid())
  linkedin  String?
  instagram String?
  whatsapp  String?

  professional            Professional?
  recommendedProfessional RecommendedProfessional?
}

model Address {
  id         String  @id @default(uuid())
  state      String
  city       String
  district   String
  street     String?
  complement String?
  number     String?
  zipCode    String?

  stores                  Store[]
  events                  Event[]
  users                   User[]
  recommendedProfessional RecommendedProfessional[]
}

model Store {
  id           String  @id @default(uuid())
  name         String
  description  String?
  website      String?
  rating       Float?  @default(0)
  openingHours String?
  logoUrl      String?

  address   Address @relation(fields: [addressId], references: [id])
  addressId String

  partnerId String          @unique
  partner   PartnerSupplier @relation(fields: [partnerId], references: [id])

  products Product[]
  events   Event[]
}

model Product {
  id          String  @id @default(uuid())
  name        String
  description String?
  price       Float
  link        String?
  featured    Boolean @default(false)
  promotion   Boolean @default(false)
  photoUrl    String?

  storeId String
  store   Store  @relation(fields: [storeId], references: [id])
}

model Event {
  id           String              @id @default(uuid())
  // imageUrl     String    
  name         String
  description  String
  date         DateTime
  type         String
  points       Int                 @default(0)
  totalSpots   Int
  filledSpots  Int                 @default(0)
  address      Address             @relation(fields: [addressId], references: [id])
  addressId    String
  storeId      String
  isActive     Boolean             @default(true)
  store        Store               @relation(fields: [storeId], references: [id])
  participants EventRegistration[]
}

model EventRegistration {
  id             String       @id @default(uuid())
  professional   Professional @relation(fields: [professionalId], references: [id])
  professionalId String
  event          Event        @relation(fields: [eventId], references: [id])
  eventId        String
  registeredAt   DateTime     @default(now())
  checkedIn      Boolean      @default(false)
  checkedInAt    DateTime?

  @@unique([professionalId, eventId])
}

model PointHistory {
  id             String         @id @default(uuid())
  operation      PointOperation
  value          Int
  source         String
  professional   Professional   @relation(fields: [professionalId], references: [id])
  professionalId String
  createdAt      DateTime       @default(now())
}

model Workshop {
  id             String           @id @default(uuid())
  name           String
  description    String
  duration       String
  points         Int
  type           WorkshopType
  professional   Professional     @relation(fields: [professionalId], references: [id])
  professionalId String
  modules        WorkshopModule[]
}

model WorkshopModule {
  id         String   @id @default(uuid())
  name       String
  content    String
  workshop   Workshop @relation(fields: [workshopId], references: [id])
  workshopId String
}

model Coupon {
  id        String   @id @default(uuid())
  name      String
  code      String   @unique
  quantity  Int
  createdAt DateTime @default(now())
}

model RecommendedProfessional {
  id           String  @id @default(uuid())
  name         String
  profession   String
  description  String?
  phone        String
  email        String?
  profileImage String?

  address   Address @relation(fields: [addressId], references: [id])
  addressId String

  socialMedia   SocialMedia? @relation(fields: [socialMediaId], references: [id])
  socialMediaId String?      @unique

  availableDays AvailableDay[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)
}

model AvailableDay {
  id                        String                  @id @default(uuid())
  dayOfWeek                 WeekDay
  recommendedProfessional   RecommendedProfessional @relation(fields: [recommendedProfessionalId], references: [id])
  recommendedProfessionalId String
}

model LoveDecoration {
  id        String  @id @default(uuid())
  name      String
  contact   String
  instagram String?
  tiktok    String?

  user User? @relation("UserLoveDecoration")
}

model Community {
  id          String  @id @default(uuid())
  name        String
  description String?
  posts       Post[]
  color       String
  icon        String

  createdAt DateTime @default(now())
}

model Post {
  id            String   @id @default(uuid())
  title         String
  content       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  attachedImage String?

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  communityId String
  community   Community @relation(fields: [communityId], references: [id])

  likes    Like[]
  comments Comment[]

  postHashtags PostHashtag[]
  notification Notification[]
}

model Hashtag {
  id   String @id @default(uuid())
  name String @unique

  postHashtags PostHashtag[]
}

model PostHashtag {
  postId    String
  hashtagId String

  post    Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  hashtag Hashtag @relation(fields: [hashtagId], references: [id], onDelete: Cascade)

  @@id([postId, hashtagId])
}

model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  postId String
  post   Post   @relation(fields: [postId], references: [id])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])

  postId String
  post   Post   @relation(fields: [postId], references: [id])
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  postId String?
  post   Post?   @relation(fields: [postId], references: [id])
}

model Report {
  id          String   @id @default(uuid())
  reason      String
  description String?
  createdAt   DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  targetId   String
  targetType String
}

model Profession {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?

  professionals Professional[]
}

model PasswordResetCode {
  id        String   @id @default(uuid())
  code      String
  expiresAt DateTime
  used      Boolean  @default(false)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Subscription {
  id                 String             @id @default(cuid())
  partnerSupplier    PartnerSupplier    @relation(fields: [partnerSupplierId], references: [id])
  partnerSupplierId  String             @unique
  stripeCustomerId   String
  subscriptionId     String             @unique
  subscriptionStatus SubscriptionStatus
  planType           String
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean            @default(false)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

/**
 * ENUMS:
 */

enum WeekDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum ProfessionalLevel {
  BRONZE
  SILVER
  GOLD
  PLATINUM
}

enum PointOperation {
  ADD
  REMOVE
}

enum WorkshopType {
  ONLINE
  PRESENTIAL
  HYBRID
}

enum NotificationType {
  LIKE
  COMMENT
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  PAST_DUE
  TRIALING
  UNPAID
}
